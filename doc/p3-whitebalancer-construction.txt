
P3 WhiteBalancer Construction Notes
===================================


### Harrison Ainsworth ###

<http://www.hxa7241.org/whitebalancer/>  
hxa7241 *at* gmail *dot* com

2007-12-24

Copyright (c) 2007, Harrison Ainsworth / HXA7241.




Contents
--------

* Todo
* Release
* Time
* Rate




Todo
----

### code ###

application:

* file-drop capability
   * works anyway (just needs good option defaults)
   * add some batch files for different options sets
      * or values can be set in the options file (p3whitebalancer-opt.txt)

(for next version)
* exr
   * preserve alpha channel
   * ImfHeaderSetCompression
   * dynamic library loader
* png
   * preserve alpha channel
   * longjmp ?
* ImageQuantizing
   * use fast logs/pows ?

library:

* add compile check that fp is IEEE-754... ?

(for next version)
* WhiteBalancer
   * re-interpret max-white as illuminant color -- to keep it white
      * pixels with magnitude within 5% (?)(consider gamma-ing) of max (over image) are linearly interpolated between mapped and original according to magnitude in 5% range (top original, bottom mapped)
      * what is max-white, for hdr ? -- the max, and equal energy
      * ranges of magnitude don't work for pre-tonemapped hdr images...
   * try adjustments to illuminant estimation
      * segmented gray-world: count each distinct color once only
      - do gray-world in RGB space -- not so effective
   * speedup
      * cache last few pixels
      * lookup tables
      * get-from or add-to a hash-map at each pixel step (usually < 200000 colors)
      * hand-coded asm with properly vectorized SSE
      * iterator for image wrapper
      - remove/control 4th column of Matrix3f
      - avoid logs and pows somehow (60% of time)
         - fast alternatives
            * time each
   * make an object interface ?


### review ###

library:
* WhiteBalancer


### test ###

library:
* WhiteBalancer

application:
* image
   * ImageFormatter
   * rgbe::write
   * exr::write
   * png::read


### linux ###



### other ###

* metadata ?

* can void*s be deleted ? -- well, auto_ptr won't use void*s...
   * C++ std is uncertain...

* static_cast<udword>( signed char ) == static_cast<udword>( signextend(signed char) )
   * (all signed numbers converted to int before operations)
* bool <-> int typechecks don't always work (dword param given bool arg)


### done ###

- speed up linux (currently > 2 times slower than MS-VC-2005)
   - only 1.4 slower than win now... (sse and manual inlining)

- lib:WhiteBalancer
   - clean output pixels too ?
      - clamp min to zero
   - is zero pixels passed unchanged ?
      - yes
   - LogFast, PowFast
      - remove unused
   - stop/avoid bad pixel data
      - negatives -- clamp to zero
      - positive infinitys -- clamp to FLOAT_LARGE
      - NaNs -- 
         - if any channel is NaN then ignore and pass pixel through unchanged
         - int isnan(double) (_isnan for VC)
         - int _isnanf(float) (not in GCC (is a template))
         - fast alternative
            - exponent is all 1s and mantissa is not all 0s
               - zero sign, then compare with 2^23 * 255: larger is NaN
                  - (*reinterpret_cast<const udword*>(&v) & 0x7FFFFFFF) > 0x7F800000
      - where ? (time them...)
         - in WhiteBalancer around calls to ImageWrapperConst::get
         - times (for woods image):
            - unchanged: 0.39s
            - isnan and clamp: 0.45s
            - cleanPixel and isNan each worth 0.025s
      - add note to documentation
   - stop nans in other fp inputs
   - slim: remove unneeded std lib use
      * exception, cstring, (climits, cfloat, cmath)
   - does negative pixels (or negative means) have effects ?
      - no, it seems not
      - also nan pixels ? -- non-portable detail: ignore
   - map operator, luminance maintain: div by zero avoidance
   - does illuminant magnitude have effects ? (it shouldn't)
      - yes, -- must fix
   - try some logging, compare image brightness
      - image luminance (Y) change (out/in) = Y(Lab(0)) / Y(Lab(illum * str))
         - not quite exact but rather close

* png::read
   * gamma -- does it do it, or just note it ? -- note it

* WhiteBalancer
   * seems to be inverted -- moving away from white ...
   * L looks correct
   * main transform looks correct
   * ks may be wrong...
   * check
      * cone and opp transforms -- look at their meaning
         * one or both are wrong (opp seems sort-of inverted)
      - are pixels overwriting themselves (aliasing) -- turn off optimization
      * matrix
         * mat * mat
         * mat * vec
         * mat * fp
         * mat - mat
         * invert
         * getrow0
         * 31 13 construction
         * from pointer/array construction
         * copy construction and assignment
   * try non-simplified formula from paper
   * saturation boost -- interface and implementation
   - what magnitude should the illuminants be ?
      - may be important...
      - in illum should be same magnitude as image mean
      - out illum should be same magnitude as in illum




Release
-------

* change version to 1.2
* remove DEBUG
* update command-line banner

* test
   * TESTING builds
   * release builds
* build (non TESTING)

* package
   * tgz for linux
   * p3-whitebalancer-lib.readme.txt
   * inc
      * p3wbWhiteBalancer-v11.h
      * p3wbWhiteBalancer.h
   * lib
      * p3whitebalancer.dll
      * p3whitebalancer.lib
      * p3whitebalancer.exp
      * libp3whitebalancer.so
      * libp3whitebalancer.so.1
      * libp3whitebalancer.so.1.1

* license -- delay decision
* architecture doc update
   * test
* write readme
   * credit reused code




Time
----

(hours)

* prepare project
   * 1.5
* arrange reused
   * 1.5
* misc
   * 1.3
   * 1.0
   * 0.2
   * 1.0
   * 0.2
   * 0.2
   * 0.1
   * 1.0
   * 1.0
   * 0.3
   * 1.0
   * 0.2
   * 0.5
   * 1.0
   * 1.0
   * 2.0
   * 2.0
   * 2.0
   * 1.0
   * 0.1
   * 0.3
   * 3.0
* gcc compile
   * 3.5

### library ###

* 1.0
* 1.0
* 1.0

* general
   * LogFast
      * 1.0
      * 3.0
      * 2.0
      * 1.5
      * 0.3
   * PowFast
      * 1.0
      * 1.5
      * 3.5
      * 0.3
* graphics
   * ColorConstants
      * 0.3
   * ColorConversion
      * 0.8
   * Matrix3f
      * 1.9
      * 0.4
      * 2.0
* image
   * ImageWrapperConst
   * ImageWrapper
      * 4.0
* p3whitebalancer
   * WhiteBalancer
      * 2
      * 1
      * 2
      * 0.4
      * 2.2
      * 0.2
      * 0.4
      * 0.8
      * 0.7
      * 2.0
      * 0.9
      * 2.0
      * 2.0
      * 2.0
      * 1.3
      * 0.7
      * 0.5
      * 1.0
      * 2.0
      * 1.0
      * 4.0
      * 3.0
      * 4.0
      * 3.0
      * 0.2

### application ###

* 1.5
* 1.0
* 1.0
* 0.3

* image
   * 1.3
   * 1.0
   * 0.5
   * ppm
      * 0.5
      * 0.9
      * 1.4
      * 0.1
      * 0.4
      * 2.0
      * 0.7
   * png
      * 4.0
      * 0.7
      * 2.0
   * rgbe
      * 1.4
      * 1.9
      * 0.7
   * exr
      * 1.0
      * 0.5
      * 1.0
   * ImageAdopter
      * 0.5
      * 0.5
      * 0.1
      * 0.2
   * ImageQuantizing
      * 2.0
      * 1.3
      * 0.1
      * 0.3
      * 1.0
      * 2.5
   * ImageFormatter
      * 4.0
      * 0.2
      * 1.0
      * 0.3
      * 0.4
      * 0.5
* p3whitebalancer
   * 1.0
   * 1.2
   * 3.5
   * 2.0
   * 0.7
   * 0.5
   * 0.5
   * 0.7




Rate
----
